#define WIN32_LEAN_AND_MEAN // Stop the compiler from using "extra" definitions from windows.h which already includes some version of winsock

#include "gtest/gtest.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <Windows.h>
#include <WinSock2.h>
#include <WS2tcpip.h>

#include "../3DServer/Sockets.h"
#include "../3DServer/Grafica.h"

// To add new class for unit testing:
// Go Project->Properties->Linker->Input->Additional Dependencies
//		and add the '.obj' file generated by the respective cpp
// DO NOT addd the Source.obj file as it contains a definition of 'main' which will create conflicts

// Dummy declaration - just for the sake of compilation
void parser(CLIENT_STRUCTURE& client) {
	return;
}
// Dummy declaration - just for the sake of compilation
void worker() {
	return;
}

class DummyGrafica:public Grafica {
public:
	vector<Triangle> getScene() {
		return object_definition;
	}
};

TEST(TestOpenGLClass, TestInit) {
	Grafica obj;
	EXPECT_FALSE(obj.isInitialized());
}

TEST(TestOpenGLClass, TestSetSize) {
	Grafica obj;
	int dim = 0;

	obj.setSize(100, 100);
	dim = 100 * 100;
	EXPECT_EQ(obj.getBufferSize()/4,dim);

	obj.setSize(210, 300);
	dim = 210 * 300;
	EXPECT_EQ(obj.getBufferSize() / 4, dim);

	obj.setSize(320, 480);
	dim = 320 * 480;
	EXPECT_EQ(obj.getBufferSize() / 4, dim);
}

TEST(TestOpenGLClass, TestLoadObject) {
	DummyGrafica obj;
	
	// Test empty input
	EXPECT_THROW(obj.loadObject(""),exception, "An empty object does not throw error");

	// Perfectly valid cube
	string 	object =
		"v 0.0 0.0 0.0\r\n"
		"v 0.0 0.0 1.0\r\n"
		"v 0.0 1.0 0.0\r\n"
		"v 0.0 1.0 1.0\r\n"
		"v 1.0 0.0 0.0\r\n"
		"v 1.0 0.0 1.0\r\n"
		"v 1.0 1.0 0.0\r\n"
		"v 1.0 1.0 1.0\r\n"
		"f 1 7 5\r\n"
		"f 1 3 7\r\n"
		"f 1 4 3\r\n"
		"f 1 2 4\r\n"
		"f 3 8 7\r\n"
		"f 3 4 8\r\n"
		"f 5 7 8\r\n"
		"f 5 8 6\r\n"
		"f 1 5 6\r\n"
		"f 1 6 2\r\n"
		"f 2 6 8\r\n"
		"f 2 8 4\r\n";
	EXPECT_NO_THROW(obj.loadObject(object),"A perfectly valid object was deemed malformed");

	// Other unsupported artifacts but still valid options inside the object
	// defitnion
	object =
		"v 0.0 0.0 0.0\r\n"
		"v 0.0 0.0 1.0\r\n"
		"v 0.0 1.0 0.0\r\n"
		"v 0.0 1.0 1.0\r\n"
		"v 1.0 0.0 0.0\r\n"
		"v 1.0 0.0 1.0\r\n"
		"v 1.0 1.0 0.0\r\n"
		"v 1.0 1.0 1.0\r\n"
		"vn 0 0 0\r\n"
		"vt 0 0 0\r\n"
		"f 1 7 5\r\n"
		"f 1 3 7\r\n"
		"f 1 4 3\r\n"
		"f 1 2 4\r\n"
		"f 3 8 7\r\n"
		"f 3 4 8\r\n"
		"f 5 7 8\r\n"
		"f 5 8 6\r\n"
		"f 1 5 6\r\n"
		"f 1 6 2\r\n"
		"f 2 6 8\r\n"
		"f 2 8 4\r\n";
	EXPECT_NO_THROW(obj.loadObject(object),"A perfectly valid .obj code was deemed malformed");

	// Supported obj tags and options but with malformed vertexes
	object = object =
		"v 0.0 0.0 0.0 1\r\n"
		"v 0.0 1.0\r\n"
		"v 0.0 1.0 0.0\r\n"
		"v 0.0 1.0 1.0\r\n"
		"v 1.0 0.0 0.0\r\n"
		"v 1.0 0.0 1.0\r\n"
		"v 1.0 1.0 0.0\r\n"
		"v 1.0 1.0 1.0\r\n"
		"f 1 7 5\r\n"
		"f 1 3 7\r\n"
		"f 1 4 3\r\n"
		"f 1 2 4\r\n"
		"f 3 8 7\r\n"
		"f 3 4 8\r\n"
		"f 5 7 8\r\n"
		"f 5 8 6\r\n"
		"f 1 5 6\r\n"
		"f 1 6 2\r\n"
		"f 2 6 8\r\n"
		"f 2 8 4\r\n";
	EXPECT_THROW(obj.loadObject(object),exception, "Invalid vertexes were accepted as valid");

	// Supported obj tags and options but with malformed faces coordinates
	object = object =
		"v 0.0 0.0 0.0\r\n"
		"v 0.0 0.0 1.0\r\n"
		"v 0.0 1.0 0.0\r\n"
		"v 0.0 1.0 1.0\r\n"
		"v 1.0 0.0 0.0\r\n"
		"v 1.0 0.0 1.0\r\n"
		"v 1.0 1.0 0.0\r\n"
		"v 1.0 1.0 1.0\r\n"
		"f 1 7 5 7\r\n"
		"f 3 7\r\n"
		"f 1 4 3\r\n"
		"f 1 2 4\r\n"
		"f 3 8 7\r\n"
		"f 3 4 8\r\n"
		"f 5 7 8\r\n"
		"f 5 8 6\r\n"
		"f 1 5 6\r\n"
		"f 1 6 2\r\n"
		"f 2 6 8\r\n"
		"f 2 8 4\r\n";
	EXPECT_THROW(obj.loadObject(object), exception, "Invalid faces were accepted as valid");
}

TEST(TestSocketClass, TestValidClient) {
	CLIENT_STRUCTURE temp;
	temp.talksHTTP = true;
	EXPECT_EQ(isClientValid(temp), true);

	temp.talksHTTP = false;
	EXPECT_EQ(isClientValid(temp), false);
}

